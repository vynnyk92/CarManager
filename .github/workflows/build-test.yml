name: build-test
on:
  push:
    branches: [ master ]
    paths-ignore:
    - '**/*.gitattributes'
    - '**/*.gitignore'
    - '**/*.md'
  pull_request:
    branches: [ master ]
  workflow_dispatch:
jobs:
  # build:
  #   container: 
  #     image: mcr.microsoft.com/dotnet/sdk:6.0
  #   services:
  #     localstack:
  #       image: localstack/localstack:2.1.0
  #       ports:
  #         - 4566:4566
  #       env:
  #         SERVICES: dynamodb,sns,sqs,s3
  #   name: build
  #   runs-on: ubuntu-latest
  #   env:
  #     environment: gha
  #   outputs:
  #     dotnet-version: ${{steps.get-version.outputs.dotnet-version}}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Get dotnet-version
  #       id: get-version
  #       shell: pwsh
  #       run: ./get-version.ps1

  #     - name: Print dotnet-version
  #       shell: pwsh
  #       run: Write-Output "${{steps.get-version.outputs.dotnet-version}}"

  #     - name: Dotnet Install
  #       uses: actions/setup-dotnet@v3
  #       with:
  #         dotnet-version: "${{steps.get-version.outputs.dotnet-version}}"

      # - name: Run Unit Tests
      #   shell: pwsh
      #   run: ./test.ps1 -Project:./test/CarManager.UnitTests/CarManager.UnitTests.csproj

      # - name: Run Integration Tests
      #   shell: pwsh
      #   run: ./test.ps1 -Project:./test/CarManager.IntegrationTests/CarManager.IntegrationTests.csproj

      # - name: Build and Publish
      #   shell: pwsh
      #   run: ./publish.ps1 -Project:./src/CarManager/CarManager.csproj

      # - name: Upload Artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: publish
      #     path: |
      #       publish

  # publish-image-docker-hub:
  #   outputs:
  #     image-number: ${{steps.image-number-generator.outputs.image-number}}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
      
  #     - name: Build Image Number
  #       id: image-number-generator
  #       run: echo image-number= ${{github.event.pull_request.number}} >> $GITHUB_OUTPUT

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
      
  #     - name: Build Docker image
  #       run: |
  #         docker build -t carmanager:${{github.event.pull_request.number}} .

  #     - name: Push Docker image
  #       run: |
  #         docker tag carmanager:${{github.event.pull_request.number}} ${{ secrets.DOCKERHUB_USERNAME }}/carmanager:${{github.event.pull_request.number}}
  #         docker push ${{ secrets.DOCKERHUB_USERNAME }}/carmanager:${{github.event.pull_request.number}}

  
  publish-image-aws-ecr:
    outputs:
      image-number: ${{steps.image-number-generator.outputs.image-number}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Build Image Number
        id: image-number-generator
        run: echo image-number= ${{github.event.pull_request.number}} >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-secret-access-key: ${{ secrets.GHA_ID }}
          aws-access-key-id: ${{ secrets.GHA_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: carmanager
          IMAGE_TAG: carmanager
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
